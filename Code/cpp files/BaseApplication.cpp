/*
-----------------------------------------------------------------------------
Filename:    BaseApplication.cpp
-----------------------------------------------------------------------------


This source file is generated by the
___                   _              __    __ _                  _ 
/___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
//  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
|___/                 |_|   |_|                                 
Ogre 1.7.x Application Wizard for VC10 (July 2011)
http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/
#include "BaseApplication.h"
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#include "../res/resource.h"
#endif
#include "test.h"


//-------------------------------------------------------------------------------------
BaseApplication::BaseApplication(void)
	: mRoot(0),
	mCamera(0),
	mSceneMgr(0),
	mWindow(0),
	mResourcesCfg(Ogre::StringUtil::BLANK),
	mPluginsCfg(Ogre::StringUtil::BLANK),
	mTrayMgr(0),
	mCameraMan(0),
	mDetailsPanel(0),
	mCursorWasVisible(false),
	mShutDown(false),
	mInputManager(0),
	mMouse(0),
	mKeyboard(0),
	ballpow(0),
	camChange(0),
	playerNum(1),
	turnNum(0)
{
	tempMove =false;
	loopSong = false;
	p1Score = 0;
	p2Score = 0;
	//setup FMOD
	FMOD_RESULT result;
	result = FMOD::System_Create(&FMODsys);     // Create the main system object.

	if (result != FMOD_OK)
	{
		std::cout << "FMOD error! (%d) %s\n" <<result;// << FMOD_ErrorString(result);
		exit(-1);
	}

	result = FMODsys->init(100, FMOD_INIT_NORMAL, 0);   // Initialize FMOD.

	if (result != FMOD_OK)
	{
		std::cout << "FMOD error! (%d) %s\n" << result;// << FMOD_ErrorString(result);
		exit(-1);
	}
	result = FMODsys->init(100, FMOD_INIT_NORMAL, 0);   // Initialize FMOD.
	result = FMODsys->createSound("C:/CollegeWork/Project/BallThrow.wav", FMOD_DEFAULT|FMOD_3D, 0, &soundThrow);
	result = FMODsys->createSound("C:/CollegeWork/Project/BallRoll.wav", FMOD_LOOP_NORMAL|FMOD_3D, 0, &soundRoll);
	result = FMODsys->createSound("C:/CollegeWork/Project/bennyhill.wav", FMOD_LOOP_NORMAL|FMOD_2D, 0, &backgSnd);
	backgSnd->setMode(FMOD_LOOP_NORMAL);
	if (result != FMOD_OK)
	{
		std::cout << "FMOD error! (%d) %s\n" << result;
		exit(-1);
	}
}
//-------------------------------------------------------------------------------------
BaseApplication::~BaseApplication(void)
{
	if (mTrayMgr) delete mTrayMgr;
	if (mCameraMan) delete mCameraMan;

	//Remove ourself as a Window listener
	Ogre::WindowEventUtilities::removeWindowEventListener(mWindow, this);
	windowClosed(mWindow);
	delete mRoot;
}
//-------------------------------------------------------------------------------------
bool BaseApplication::configure(void)
{
	// Show the configuration dialog and initialise the system
	// You can skip this and use root.restoreConfig() to load configuration
	// settings if you were sure there are valid ones saved in ogre.cfg
	if(mRoot->showConfigDialog())
	{
		// If returned true, user clicked OK so initialise
		// Here we choose to let the system create a default rendering window by passing 'true'
		mWindow = mRoot->initialise(true, "test Render Window");

		// Let's add a nice window icon
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
		HWND hwnd;
		mWindow->getCustomAttribute("WINDOW", (void*)&hwnd);
		LONG iconID   = (LONG)LoadIcon( GetModuleHandle(0), MAKEINTRESOURCE(IDI_APPICON) );
		SetClassLong( hwnd, GCL_HICON, iconID );
#endif
		return true;
	}
	else
	{
		return false;
	}
}
//-------------------------------------------------------------------------------------
void BaseApplication::chooseSceneManager(void)
{
	// Get the SceneManager, in this case a generic one
	mSceneMgr = mRoot->createSceneManager(Ogre::ST_GENERIC);
}
//-------------------------------------------------------------------------------------
void BaseApplication::createCamera(void)
{
	// Create the camera
	mCamera = mSceneMgr->createCamera("PlayerCam");

	// Position it at 500 in Z direction
	mCamera->setPosition(Ogre::Vector3(0,35,80));
	// Look back along -Z
	mCamera->lookAt(Ogre::Vector3(0,0,-50));
	mCamera->setNearClipDistance(5);

	mCameraMan = new OgreBites::SdkCameraMan(mCamera);   // create a default camera controller
}
//-------------------------------------------------------------------------------------
void BaseApplication::createFrameListener(void)
{
	Ogre::LogManager::getSingletonPtr()->logMessage("*** Initializing OIS ***");
	OIS::ParamList pl;
	size_t windowHnd = 0;
	std::ostringstream windowHndStr;

	mWindow->getCustomAttribute("WINDOW", &windowHnd);
	windowHndStr << windowHnd;
	pl.insert(std::make_pair(std::string("WINDOW"), windowHndStr.str()));

	mInputManager = OIS::InputManager::createInputSystem( pl );

	mKeyboard = static_cast<OIS::Keyboard*>(mInputManager->createInputObject( OIS::OISKeyboard, true ));
	mMouse = static_cast<OIS::Mouse*>(mInputManager->createInputObject( OIS::OISMouse, true ));

	mMouse->setEventCallback(this);
	mKeyboard->setEventCallback(this);

	//Set initial mouse clipping size
	windowResized(mWindow);

	//Register as a Window listener
	Ogre::WindowEventUtilities::addWindowEventListener(mWindow, this);

	mTrayMgr = new OgreBites::SdkTrayManager("InterfaceName", mWindow, mMouse, this);
	mTrayMgr->showFrameStats(OgreBites::TL_BOTTOMLEFT);
	mTrayMgr->showLogo(OgreBites::TL_BOTTOMRIGHT);
	mTrayMgr->hideCursor();

	// create a params panel for displaying sample details
	Ogre::StringVector items;
	items.push_back("Ball Speed");
	items.push_back("Power");
	items.push_back("Player");
	items.push_back("Shot");
	items.push_back("Player 1 Score");
	items.push_back("Player 2 Score");
	items.push_back("Pins Left");
	items.push_back("cam.oZ");
	items.push_back("");
	items.push_back("Filtering");
	items.push_back("Poly Mode");

	mDetailsPanel = mTrayMgr->createParamsPanel(OgreBites::TL_NONE, "DetailsPanel", 200, items);
	mDetailsPanel->setParamValue(9, "Bilinear");
	mDetailsPanel->setParamValue(10, "Solid");
	mDetailsPanel->hide();

	mRoot->addFrameListener(this);
}
//-------------------------------------------------------------------------------------
void BaseApplication::destroyScene(void)
{
}
//-------------------------------------------------------------------------------------
void BaseApplication::createViewports(void)
{
	// Create one viewport, entire window
	Ogre::Viewport* vp = mWindow->addViewport(mCamera);
	vp->setBackgroundColour(Ogre::ColourValue(0,0,0));

	// Alter the camera aspect ratio to match the viewport
	mCamera->setAspectRatio(
		Ogre::Real(vp->getActualWidth()) / Ogre::Real(vp->getActualHeight()));
}
//-------------------------------------------------------------------------------------
void BaseApplication::setupResources(void)
{
	// Load resource paths from config file
	Ogre::ConfigFile cf;
	cf.load(mResourcesCfg);

	// Go through all sections & settings in the file
	Ogre::ConfigFile::SectionIterator seci = cf.getSectionIterator();

	Ogre::String secName, typeName, archName;
	while (seci.hasMoreElements())
	{
		secName = seci.peekNextKey();
		Ogre::ConfigFile::SettingsMultiMap *settings = seci.getNext();
		Ogre::ConfigFile::SettingsMultiMap::iterator i;
		for (i = settings->begin(); i != settings->end(); ++i)
		{
			typeName = i->first;
			archName = i->second;
			Ogre::ResourceGroupManager::getSingleton().addResourceLocation(
				archName, typeName, secName);
		}
	}
}
//-------------------------------------------------------------------------------------
void BaseApplication::createResourceListener(void)
{

}
//-------------------------------------------------------------------------------------
void BaseApplication::loadResources(void)
{
	Ogre::ResourceGroupManager::getSingleton().initialiseAllResourceGroups();
}
//-------------------------------------------------------------------------------------
void BaseApplication::go(void)
{
#ifdef _DEBUG
	mResourcesCfg = "resources_d.cfg";
	mPluginsCfg = "plugins_d.cfg";
#else
	mResourcesCfg = "resources.cfg";
	mPluginsCfg = "plugins.cfg";
#endif

	if (!setup())
		return;

	mRoot->startRendering();

	// clean up
	destroyScene();
}
//-------------------------------------------------------------------------------------
bool BaseApplication::setup(void)
{
	mRoot = new Ogre::Root(mPluginsCfg);

	setupResources();

	bool carryOn = configure();
	if (!carryOn) return false;

	chooseSceneManager();
	createCamera();
	createViewports();

	// Set default mipmap level (NB some APIs ignore this)
	Ogre::TextureManager::getSingleton().setDefaultNumMipmaps(5);

	// Create any resource listeners (for loading screens)
	createResourceListener();
	// Load resources
	loadResources();

	// Create the scene
	createScene();

	createFrameListener();

	return true;
};
//-------------------------------------------------------------------------------------
bool BaseApplication::frameRenderingQueued(const Ogre::FrameEvent& evt)
{
	if(mWindow->isClosed())
		return false;

	if(mShutDown)
		return false;

	//Need to capture/update each device
	mKeyboard->capture();
	mMouse->capture();


	mTrayMgr->frameRenderingQueued(evt);

	FMODsys->update();
		BaseApplication::UpdateBall();

	BaseApplication::UpdateCamera();


	if (!mTrayMgr->isDialogVisible())
	{
		mCameraMan->frameRenderingQueued(evt);   // if dialog isn't up, then update the camera
		if (mDetailsPanel->isVisible())   // if details panel is visible, then update its contents
		{
			mDetailsPanel->setParamValue(0, Ogre::StringConverter::toString(mBallObject->getPower()));
			mDetailsPanel->setParamValue(1, Ogre::StringConverter::toString(ballpow));
			if(playerNum == 1)
				{mDetailsPanel->setParamValue(2, "1");
			}
			else
			{mDetailsPanel->setParamValue(2, "2");
			}

			mDetailsPanel->setParamValue(3, Ogre::StringConverter::toString(turnNum+1));
			mDetailsPanel->setParamValue(4, Ogre::StringConverter::toString(p1Score));
			mDetailsPanel->setParamValue(5, Ogre::StringConverter::toString(p2Score));
			mDetailsPanel->setParamValue(6, Ogre::StringConverter::toString(10 - pinManager->getHitPins()));
		}
	}
	if(mBallObject->getMove() == true){

		result = FMODsys->createReverb(&reverb);
		FMOD_REVERB_PROPERTIES prop = FMOD_PRESET_UNDERWATER  ;
		reverb->setProperties(&prop);
		FMOD_VECTOR pos = {mCamera->getPosition().x, 0.0f,mCamera->getPosition().z };
		float mindist = 100.0f; 
		float maxdist = 150.0f;
		reverb->set3DAttributes(&pos, mindist, maxdist);

		pinManager->collisions(mBallObject);
		mBallObject->update();
		channel->setPaused(false);// This is where the sound really starts.
	}	
	else{
		mArrowObject->rotate(mKeyboard);
		channel->setPaused(true);
	}

	if(mBallObject->getMove()){
		ballpow=0;
	}

	if(mBallObject->getSpacePressed()){
		if(ballpow<20)
		ballpow+=0.03;
	}

	Ogre::MaterialManager::getSingleton().setDefaultTextureFiltering(Ogre::TFO_ANISOTROPIC);

	FMOD_VECTOR  listenervel  = { 0.0f, 0.0f, 0.0f };

	FMOD_VECTOR  listenerpos  = { mCamera->getPosition().x, 0.0f, mCamera->getPosition().z };

	FMODsys->set3DListenerAttributes(0, &listenerpos, &listenervel, 0, 0);

	//update position of sound
	if(channel){
		FMOD_VECTOR  sourcePos  = { mBallObject->getPosition().x,mBallObject->getPosition().y,mBallObject->getPosition().z };
		//source is fixed so velocity is zero
		channel->set3DAttributes(&sourcePos,0);
	}

	return true;
}
//-------------------------------------------------------------------------------------
void BaseApplication::PlayerUpdate(){
	if (playerNum == 1)
	{
		p1Score+= pinManager->getHitPins();
		if(mBallObject->getName() != "1"){
			mBallObject->setName("1");
		}
	}

	else
	{
		p2Score+= pinManager->getHitPins();
		if(mBallObject->getName() != "2"){
			mBallObject->setName("2");
		}
	}
}
//-------------------------------------------------------------------------------------
void BaseApplication::UpdateBall(){

	if((mBallObject->getPosition().x>=29||mBallObject->getPosition().x<=-29) && mBallObject->getGutterB() ==false){
		FMODsys->playSound(FMOD_CHANNEL_FREE, soundThrow,false, &channel);
		channel->setVolume(0.8f);       // Set the volume while it is paused.
		channel->setPaused(false);      // This is where the sound really starts.
		channel->set3DMinMaxDistance(100,10000);
	}

	if(mBallObject->getPosition().z <=-340){
		mBallObject->setVelocity(Ogre::Vector3(0,0,0));
	mBallObject->setMove(false);	
		//channel->setPaused(true);
		channel->stop();
		TurnControl();
	}
}
//-------------------------------------------------------------------------------------
void BaseApplication::TurnControl(){
	turnNum++;
	mBallObject->Reset();
		mArrowObject->Reset();
		camChange=0;
		mBallObject->setSpacePressed(false);
		mBallObject->update();

	if(turnNum==2){
		PlayerUpdate();
		playerNum*=-1;
		BallChange();
		turnNum=0;
		pinManager->replacePins();
	}
}
//-------------------------------------------------------------------------------------
void BaseApplication::UpdateCamera(){

	if(mBallObject->getMove()){
		srand (time(NULL));
		
		if(camChange ==0){
			float rand2 = rand()%2+1;//includes 2 because of +1 ie 2 all together
			if(rand2 == 0){
				mCamera->setPosition(Ogre::Vector3(60,35,-240));
			}
			else if(rand2 == 1){
				mCamera->setPosition(Ogre::Vector3(-60,35,-240));
			}
			else if(rand2 == 2){
				mCamera->setPosition(Ogre::Vector3(30,20,-330));
			}

			camChange = 1;
		}
			
			mCamera->lookAt(Ogre::Vector3(mBallObject->getPosition().x,mBallObject->getPosition().y,mBallObject->getPosition().z));
	}

	if(mBallObject->getPosition().z<=-200){

		srand (time(NULL));
		
		if(camChange ==1){
			float rand2 = rand()%3+1;//includes 3 with +1
			if(rand2 == 0){
				mCamera->setPosition(Ogre::Vector3(60,35,-240));
			}
			else if(rand2 == 1)
			{
				mCamera->setPosition(Ogre::Vector3(-60,35,-240));
			}
			else if(rand2 == 2)
			{
				mCamera->setPosition(Ogre::Vector3(30,20,-330));
			}
				else if(rand2 == 3)
			{
				mCamera->setPosition(Ogre::Vector3(0,50,-340));
			}
		}
		camChange = 2;
		mCamera->lookAt(Ogre::Vector3(mBallObject->getPosition().x,mBallObject->getPosition().y,mBallObject->getPosition().z));
	}
	if(camChange==0)
	{
		mCamera->setPosition(Ogre::Vector3(0,35,80));
		mCamera->lookAt(Ogre::Vector3(0,0,-50));
	}
}
//-------------------------------------------------------------------------------------
bool BaseApplication::keyPressed( const OIS::KeyEvent &arg ){
	// First example of control with key input
	if (arg.key == OIS::KC_SPACE){
		if(mBallObject->getMove() == false)
		{
			mBallObject->setSpacePressed(true);
		}
	}

	if(mBallObject->getMove() == false){
		if (arg.key == OIS::KC_Z){
			mBallObject->setPosition(mBallObject->getPosition() + Ogre::Vector3(-2,0,0));
			mArrowObject->setPosition(Ogre::Vector3(mBallObject->getPosition().x,10.0f,mBallObject->getPosition().z));
		}
		if (arg.key == OIS::KC_X){
			mBallObject->setPosition(mBallObject->getPosition() + Ogre::Vector3(+1,0,0));
			mArrowObject->setPosition(Ogre::Vector3(mBallObject->getPosition().x,10.0f,mBallObject->getPosition().z));
		}
	}

	if(arg.key == OIS::KC_R){
		mBallObject->Reset();
		mArrowObject->Reset();
		camChange=0;
		mBallObject->setSpacePressed(false);
		mBallObject->update();
	}

	if(arg.key == OIS::KC_T){
		pinManager->replacePins();
	}

	if (arg.key == OIS::KC_ESCAPE)
	{
		mShutDown = true;
	}
	if(arg.key == OIS::KC_L){

		if (loopSong == false){
			FMODsys->playSound(FMOD_CHANNEL_FREE, backgSnd,false, &channelBack);
			channelBack->setVolume(0.2f);       // Set the volume while it is paused.
			loopSong = true;
			channelBack->setPaused(false);

		}

	}
	if(arg.key == OIS::KC_P){		
		if(loopSong == true ){
			loopSong=false;
			channelBack->setPaused(true);
		}
	}
	if (arg.key == OIS::KC_G)   // toggle visibility of even rarer debugging details
	{
		if (mDetailsPanel->getTrayLocation() == OgreBites::TL_NONE)
		{
			mTrayMgr->moveWidgetToTray(mDetailsPanel, OgreBites::TL_TOPRIGHT, 0);
			mDetailsPanel->show();
		}
		else
		{
			mTrayMgr->removeWidgetFromTray(mDetailsPanel);
			mDetailsPanel->hide();
		}
	}
	mDetailsPanel->setParamValue(9, "");
	mCameraMan->injectKeyDown(arg);
	return true;
}

//-----------------------------------------------------------------------------------
void BaseApplication::BallChange(){
	if(mBallObject->getName() != "1"){
		mBallObject->sphere->setMaterialName("Examples/RustySteel");
	}
	else {
		mBallObject->sphere->setMaterialName("Examples/RustySteel1");
	}
}

bool BaseApplication::keyReleased( const OIS::KeyEvent &arg ){
	mCameraMan->injectKeyUp(arg);
	int num = 0;
	if (arg.key == OIS::KC_SPACE){
		if(mBallObject->getMove() == false)
		{mBallObject->setMove(true);	
		mBallObject->setSpacePressed(true);

		FMODsys->playSound(FMOD_CHANNEL_FREE, soundThrow,false, &channel);
		channel->setVolume(0.8f);       // Set the volume while it is paused.
		channel->setPaused(false);      // This is where the sound really starts.
		channel->set3DMinMaxDistance(100,10000);


		if(mBallObject->getMove()){
		FMODsys->playSound(FMOD_CHANNEL_FREE, soundRoll,false, &channel);
		channel->setVolume(0.8f);       // Set the volume while it is paused.

		channel->set3DMinMaxDistance(100,10000);
		}

		srand (time(NULL));
		//float rand2 = rand()%2;
		float rand2;

		if(mBallObject->getPosition().x>=0){
			rand2 = 1;
		}
		else {
		rand2 = 2;
		}

		if(rand2 ==1){
			mBallObject->setDeviDirection(1);
		}
		else	{mBallObject->setDeviDirection(0);}

		mBallObject->setDevtnTmr((rand() % 150/ballpow));

		mBallObject->setPower(ballpow);
		mBallObject->setVelocity((((mArrowObject->getOrientation()*(Ogre::Vector3::UNIT_Y)*-1)/10))*mBallObject->getPower());
		}
	}
	return true;
}

bool BaseApplication::mouseMoved( const OIS::MouseEvent &arg )
{
	if (mTrayMgr->injectMouseMove(arg)) return true;
	mCameraMan->injectMouseMove(arg);
	return true;
}

bool BaseApplication::mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id )
{
	if (mTrayMgr->injectMouseDown(arg, id)) return true;
	mCameraMan->injectMouseDown(arg, id);
	return true;
}

bool BaseApplication::mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id )
{
	if (mTrayMgr->injectMouseUp(arg, id)) return true;
	mCameraMan->injectMouseUp(arg, id);
	return true;
}

//Adjust mouse clipping area
void BaseApplication::windowResized(Ogre::RenderWindow* rw)
{
	unsigned int width, height, depth;
	int left, top;
	rw->getMetrics(width, height, depth, left, top);

	const OIS::MouseState &ms = mMouse->getMouseState();
	ms.width = width;
	ms.height = height;
}

//Unattach OIS before window shutdown (very important under Linux)
void BaseApplication::windowClosed(Ogre::RenderWindow* rw)
{
	//Only close for window that created OIS (the main window in these demos)
	if( rw == mWindow )
	{
		if( mInputManager )
		{
			mInputManager->destroyInputObject( mMouse );
			mInputManager->destroyInputObject( mKeyboard );

			OIS::InputManager::destroyInputSystem(mInputManager);
			mInputManager = 0;
		}
	}
}
